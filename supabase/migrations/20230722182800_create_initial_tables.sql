create table public.addresses (
  id int generated by default as identity primary key,
  street_address text,
  street_address_line_2 text,
  city text,
  state text,
  county text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.profiles (
  id uuid not null references auth.users on delete cascade,
  first_name text,
  last_name text,
  email text,
  address_id int references public.addresses(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.theaters (
  id int generated by default as identity primary key,
  name text,
  phone text,
  parking_instructions text,
  notes text,
  url text,
  type text,
  referred text,
  concessions text,
  address_id int references public.addresses(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.theater_managers (
  id int generated by default as identity primary key,
  theater_id int references public.theaters(id),
  user_id uuid references auth.users(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.stages (
  id int generated by default as identity primary key,
  theater_id int references public.theaters(id),
  name text,
  type text,
  seating_capacity int,
  wheelchair_accessible boolean,
  notes text,
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

create table public.productions (
  id int generated by default as identity primary key,
  stage_id int references public.stages(id),
  theater_id int references public.theaters(id),
  name text,
  type text,
  summary text,
  writers text [],
  directors text [],
  composers text [],
  kid_friendly boolean,
  cost_range text,
  duration_minutes int,
  notes text,
  url text,
  start_date date,
  end_date date,
  poster_id uuid references storage.objects(id),
  created_at timestamptz default now(),
  updated_at timestamptz default now()
);

alter table
  public.addresses enable row level security;

alter table
  public.profiles enable row level security;

alter table
  public.theaters enable row level security;

alter table
  public.stages enable row level security;

alter table
  public.productions enable row level security;

create policy "Users can update their own profiles." on public.profiles for
update
  using (auth.uid() = id);

create policy "Users can update their own address." on public.addresses for
update
  using (
    auth.uid() = (
      select
        public.profiles.id
      from
        public.profiles
      where
        public.addresses.id = public.profiles.address_id
    )
  );

create policy "Theater Manager Users can update their own theaters." on public.theaters for
update
  using (
    auth.uid() in (
      select
        public.theater_managers.user_id
      from
        public.theater_managers
      where
        public.theaters.id = public.theater_managers.theater_id
    )
  );

create policy "Theater Manager Users can create stages for their own theaters." on public.stages for
insert
  with check (
    auth.uid() in (
      select
        public.theater_managers.user_id
      from
        public.theater_managers
      where
        public.stages.theater_id = public.theater_managers.theater_id
    )
  );

create policy "Theater Manager Users can update their own stages." on stages for
update
  using (
    auth.uid() in (
      select
        theater_managers.user_id
      from
        theater_managers
      where
        stages.theater_id = theater_managers.theater_id
    )
  );

create policy "Theater Manager Users can delete their own stages." on stages for delete using (
  auth.uid() in (
    select
      theater_managers.user_id
    from
      theater_managers
    where
      stages.theater_id = theater_managers.theater_id
  )
);

create policy "Theater Manager Users can create productions for their own theaters." on productions for
insert
  with check (
    auth.uid() in (
      select
        theater_managers.user_id
      from
        theater_managers
      where
        productions.theater_id = theater_managers.theater_id
    )
  );

create policy "Theater Manager Users can update their own productions." on productions for
update
  using (
    auth.uid() in (
      select
        theater_managers.user_id
      from
        theater_managers
      where
        productions.theater_id = theater_managers.theater_id
    )
  );

create policy "Theater Manager Users can delete their own productions." on productions for delete using (
  auth.uid() in (
    select
      theater_managers.user_id
    from
      theater_managers
    where
      productions.theater_id = theater_managers.theater_id
  )
);
